

[]:表示可以输入的值
():表示附加注释
查看git当前所有配置项
git config [--local] | [--global] | [--system] --list
-:表示分支

#day01
mkdir learngit
cd learngit
pwd  #显示当前目录
git init #初始化repository
ls-ah #显示隐藏文件

#注意：所有的版本控制系统，其实只能跟踪文本文件的改动。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化。
#Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。
#因为文本是有编码的，比如中文有常用的GBK编码，日文有Shift_JIS编码，如果没有历史遗留问题，
#强烈建议使用标准的UTF-8编码，所有语言使用同一种编码，既没有冲突，又被所有平台所支持。

小结
现在总结一下今天学的两点内容：

初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

使用命令git add <file>，注意，可反复多次使用，添加多个文件；
使用命令git commit -m <message>，完成。


#day02
vi readme.txt
git status
git diff readme.txt
git diff ./
#可以配置比较工具
git config --global diff.tool bc3
git config --global difftool.bc3.path "D:/works/Beyond Compare 4/BCompare.exe"
git difftool readme.txt
git difftool ./
y


小结
要随时掌握工作区的状态，使用git status命令。

如果git status告诉你有文件被修改过，用git diff可以查看修改内容。



#day03
git log
git log --pretty=oneline
git reset --hard HEAD^[^^ [OR] ~100(number)]
cat readme.txt
git reset --hard 5db6f2(commit_id)
git reflog
git reset --hard 5db6f2a

#Git的版本回退速度非常快，因为Git在内部有个指向当前版本的HEAD指针，
#当你回退版本的时候，Git仅仅是把HEAD从指向append GPL：

小结
现在总结一下：

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。



#day04
工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。

Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。



#day05
git status
vi readme.txt
git add readme.txt
git status
vi readme.txt
git commit -m "git tracks changes"
git status
git diff HEAD -- readme.txt #和版本库中最新提交的readme.txt对比
git difftool HEAD -- readme.txt
git add readme.txt
git commit -m "git tracks changes of files"
git diff HEAD -- readme.txt

你看，我们前面讲了，Git管理的是修改，当你用git add命令后，
在工作区的第一次修改被放入暂存区，准备提交，但是，
在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，
也就是第一次的修改被提交了，第二次的修改不会被提交。


小结
现在，你又理解了Git是如何跟踪修改的，每次修改，
如果不用git add到暂存区，那就不会加入到commit中。



#day06
vi readme.txt
git status
git checkout -- readme.txt
cat readme.txt
vi readme.txt
git add readme.txt
git status
git reset HEAD readme.txt  #区别于版本回退，git reset --hard commit_id/HEAD^
git checkout --readme.txt 
git status


命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令。


小结
又到了小结时间。

场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。



#删除文件
git add test.txt
git commit -m "add test.txt"
rm test.txt 
git status
git rm test.txt
git commit -m "remove test.txt"
git checkout - test.txt


现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit：
另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
git checkout -- test.txt

#注意：git rm跟git add是一样的效果，都是操作暂存区，还需要commit才能删除分支上的文件

小结
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，
你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。



#远程respository(仓库)

第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：

$ ssh-keygen -t rsa -C "youremail@example.com"
你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。

如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：

然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：



#添加远程仓库
git remote add origin git@github.com:michaelliao/learngit.git

如果已经存在，不准添加则
git remote rm origin 
再添加
or
#
git remote set-url origin 


#给远程库添加多个url地址
前提
一般来说，我们为git增加远程库，一般都是
git remote add origin <url> ( 你可以使用真实的地址来代替 \<url\> )

但是你可能想要把你的本地的git库，既push到github上，又push到开源中国的Git@OSC上，怎么解决呢。
有人可能会用两个甚至多个远程库，即再添加一个远程库git remote add origin2;
这个方法很低效，因为你要git push 两次才能完成push到两个库。

其实还有一个方法，git的一个远程库 可以对应多个地址，即我能让 远程库origin拥有多个url地址。 方法如下：

使用流程
首先，我们从零开始， 假设你现在想要增加3个远程库地址，分别为 :

\<url1\> https:#git.oschina.net/shede333/swioslibary.git
\<url2\> https:#git.oschina.net/shede333/swscrollbar.git
\<url3\> https:#github.com/shede333/CoreAnimationTestSW.git

首先，先增加第一个地址 git remote add origin <url1>
然后增加第二个地址 git remote set-url --add origin <url2>
增加第三个地址 git remote set-url --add origin <url3>
....依次类推

这样就完成了添加多个地址到origin库中了， 以后只要使用git push origin master 就可以一次性push到3各库里面了(使用git push也可)

原理解析
git remote set-url --add origin 就是往当前git项目的config文件里增加一行记录
config文件打开方式有两种：

使用命令git config -e
在当前git项目的根目录下，文件位于 .git/config (.git目录为隐藏文件)
你每执行一次git remote set-url --add origin 就会增加一行，如下图：

git remote -v:显示当前所有远程库的详细信息，显示格式为 远程库名字 url连接(类型)



所以说，你直接在config里面直接添加url来修改也是可以的，不必去执行git命令。

注意
使用git push origin master时，你可以push到origin的多个url地址，
但是使用 git pull时，只能拉取origin里的一个url地址(即fetch-url，如上图)，这个fetch-url默认为 你添加的到origin的第一个地址，
如果你想更改，只需要更改config文件里，那三个url的顺序即可，fetch-url会直接对应排行第一的那个utl连接

---------------------

本文来自 南宫木java 的CSDN 博客 ，全文地址请点击：https:#blog.csdn.net/u012022003/article/details/53734730?utm_source=copy 



#从远程库克隆
git clone git@github.com:neilyoTracer/gitskills.git

你也许还注意到，GitHub给出的地址不止一个，还可以用https:#github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git:#使用ssh，但也可以使用https等其他协议。

使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。

小结
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。

Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

#创建与合并分支
git branch -b dev #创建一个dev分支,并切换到这个分支上
(
    git branch dev
    git checkout dev
)
vi readme
git add readme
git commit -m "xxxx"
git checkout master
git status
git add .
git commit -m "xxxx"
git merge dev
git branch -d dev #删除分支

因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，
合并后再删掉分支，
这和直接在master分支上工作效果是一样的，但过程更安全。

小结
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>


#解决冲突
git checkout -b feature1
vi readme
git add readme
git commit -m "AND simple"
git checkout master
vi readme
git add readme
git commit -m "& simple"
git merge feature1
vi readme
git add readme.txt
git commit -m "conflict fixed"
git log --graph --pretty=oneline --abbrev-commit
git branch -d feature1

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

小结
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。

用git log --graph命令可以看到分支合并图。



#分支管理策略
git checkout -b dev
git add readme.txt
git commit -m "add merge"
git checkout master
git merge --no-ff -m "merge with no-ff" dev
git log --graph --pretty=oneline --abbrev-commit

分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：

首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；

那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；

你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

小结
Git分支十分强大，在团队开发中应该充分应用。

合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。



#bug分支(git stash)
git status - dev
git stash - dev
git checkout master - dev
git checkout -b issue-101 -master
vi readme - issue-101
git add readme - issue-101
git commit -m "fix bug 101" - issue-101
git checkout master - issue-101
git merge --no-ff -m "merged bug fix 101" issue-101 -master
git checkout dev -master
git status
git stash list
git stash pop - dev
git stash apply stash@{0}


#注意：删除临时分支时，请处于master分支上

工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了：


小结
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。



#Feature分支
git checkout -b feature-vulcan -dev
git add vulcan.py 
git commit -m "add feature vulcan"
git checkout dev 
git branch -D feature-vulcan


git branch -r -d origin/branch-name #删除远端分支

一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。

但是！

就在此时，接到上级命令，因经费不足，新功能必须取消！

虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：

小结
开发一个新feature，最好新建一个分支；

如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。


git切换到指定远程分支

git checkout -b 本地分支名 origin/远程分支名

ex:
git branch -a
* dev
 master
 remotes/origin/HEAD -> origin/master
 remotes/origin/master
 remotes/origin/release/caigou_v1.0
git checkout -b dev origin/release/caigou_v1.0


__________________________________________________________________________________________________________
管理git生成的多个ssh key

问题阐述
当有多个git账号的时候，比如一个github，用于自己进行一些开发活动，再来一个gitlab，一般是公司内部的git。这两者你的邮箱如果不同的话，就会涉及到一个问题，生成第二个git的key的时候会覆盖第一个的key，导致必然有一个用不了。

问题解决
我们可以在~/.ssh目录下新建一个config文件配置一下，就可以解决问题

具体步骤
生成第一个ssh key(这里我用于github，用的gmail邮箱)
    ssh-keygen -t rsa -C "yourmail@gmail.com" 
这里不要一路回传，让你选择在哪里选择存放key的时候写个名字，比如 id_rsa_github，之后的两个可以回车。
完成之后我们可以看到~/.ssh目录下多了两个文件

~/.ssh目录下的文件~/.ssh目录下的文件
生成第二个ssh key（这里我用于gitlab，用的是公司邮箱）

 ssh-keygen -t rsa -C "yourmail@gmail.com" 
还是一样不要一路回车，在第一个对话的时候继续写个名字，比如 id_rsa_gitlab,之后的两个可以回车。
完成之后我们可以看到如2中图所标记，一样出现两个文件。（一个公钥一个私钥）

打开ssh-agent
这里如果你用的github官方的bash，ssh-agent -s,如果是其他的，比如msysgit,eval $(ssh-agent -s)

添加私钥

 ssh-add ~/.ssh/id_rsa_github
 ssh-add ~/.ssh/id_rsa_gitlab
创建并修改config文件

在windows下新建一个txt文本，然后将名字后缀一起改成config即可
在bash下的话直接touch config 即可。
添加一下内容

    # gitlab
    Host git.iboxpay.com
        HostName git.iboxpay.com  //这里填你们公司的git网址即可
        PreferredAuthentications publickey
        IdentityFile ~/.ssh/id_rsa_gitlab
        User zhangjun
    
    # github
    Host github.com
        HostName github.com
        PreferredAuthentications publickey
        IdentityFile ~/.ssh/id_rsa_github
        User ZJsnowman
在github和gitlab上添加公钥即可，这里不再多说。

测试

分别测试githab和gitlub分别测试githab和gitlub
PS:如果到这里你没有成功的话，别急，教你解决问题的终极办法--debug

比如测试github，ssh -vT git@github.com

-v 是输出编译信息，然后根据编译信息自己去解决问题吧。就我自己来说一般是config里的host那块写错了。

补充一下
如果之前有设置全局用户名和邮箱的话，需要unset一下

git config --global --unset user.name
git config --global --unset user.email
然后在不同的仓库下设置局部的用户名和邮箱
比如在公司的repository下git config user.name "yourname" git config user.email "youremail" 在自己的github的仓库在执行刚刚的命令一遍即可。

这样就可以在不同的仓库，已不同的账号登录。





